const creds = require('./creds.json')

const google = require('@googleapis/sheets');
const { JWT } = require('google-auth-library');

async function getSheetDataByRange({ sheets, spreadsheetId, range }) {
    const valuesResponse = await sheets.spreadsheets.values.get({
        spreadsheetId,
        range,
    });

    return valuesResponse
}
async function getSheetsMetadata({ sheets, sheetsMetadata, spreadsheetId }) {
    const response = await sheets.spreadsheets.get({
        spreadsheetId,
    });

    const sheetData = await Promise.all(response.data.sheets.map(async sheet => {
        const sheetTitle = sheet.properties.title;

        // Fetch the first row to use as headers
        const range = `${sheetTitle}!A1:1`;
        const valuesResponse = await getSheetDataByRange({ sheets, spreadsheetId, range })
        const headers = valuesResponse.data.values ? valuesResponse.data.values[0] : [];

        // Calculate the cell range in A1 notation
        const rowCount = sheet.properties.gridProperties.rowCount;
        const columnCount = sheet.properties.gridProperties.columnCount;
        const columnLetter = getColumnLetter(columnCount);
        const cellsRange = `A1:${columnLetter}${rowCount}`;

        return {
            title: sheetTitle,
            rowCount: rowCount,
            columnCount: columnCount,
            frozenRowCount: sheet.properties.gridProperties.frozenRowCount,
            sheetType: sheet.properties.sheetType,
            headers: headers,
            cellsRange: cellsRange,
        };
    }));

    const metadata = {
        title: response.data.properties.title,
        sheets: sheetData,
    };

    sheetsMetadata.set(spreadsheetId, metadata);

    return metadata;
}

function getColumnLetter(columnNumber) {
    let letter = '';
    while (columnNumber > 0) {
        const remainder = (columnNumber - 1) % 26;
        letter = String.fromCharCode(65 + remainder) + letter;
        columnNumber = Math.floor((columnNumber - 1) / 26);
    }
    return letter;
}

async function fetchSheetsMetadata(googleSheetsConfig, sheetsMetadata, spreadsheetId) {
    const auth = new JWT({
        // env var values here are copied from service account creds generated by google
        // see "Authentication" section in docs for more info
        email: googleSheetsConfig.client_email,
        key: googleSheetsConfig.private_key,
        scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });

    const sheets = google.sheets({ version: 'v4', auth });

    const metadata = await getSheetsMetadata({ sheets, sheetsMetadata, spreadsheetId });
    return metadata;
}



module.exports = function (RED) {

    const sheetsMetadata = new Map()

    async function onSheetOptionsRequest(req, res) {
        try {

            const { sheetId: spreadsheetId, credentials, gauthNodeId } = req.body
            let googleSheetsConfig = credentials

            if (!credentials.client_email) {
                const config = RED.nodes.getNode(gauthNodeId)?.credentials?.config
                if (!config) return res.status(200).send({})

                googleSheetsConfig = JSON.parse(config)
            }

            if (!spreadsheetId || !googleSheetsConfig?.private_key || !googleSheetsConfig?.client_email) {
                const message = `Invalid request sent with: ${JSON.stringify({ spreadsheetId, credentials })}`
                RED.log.error(message);
                return res.status(400).send(message);
            }

            const metadata = await fetchSheetsMetadata(googleSheetsConfig, sheetsMetadata, spreadsheetId);

            return res.json(metadata);
        } catch (error) {
            RED.log.error(error)
            RED.log.error(`ensure you've been using the correct spreadsheet id, have the proper access to it and the credentials data is correct`)
            res.status(500).json({ error })
        }
    }


    function SheetsToJSON(ctx) {
        RED.nodes.createNode(this, ctx);
        const node = this;
        const sheetId = ctx.sheetId
        // const columns = ctx.columns
        const creds = RED.nodes.getNode(ctx.credentials);
        console.log({ creds, sheetId })

        node.on('input', function (msg) {
            // const isRange = typeof columns[0] === 'string'
            // const meta = sheetsMetadata.get(sheetId)
            // if (!meta) return node.error('couldnt find the sheet')

            // node.warn(meta)

            // if (isRange) {
            //     node.warn('handle as range')
            // }
            // else {
            //     // all the file
            //     // parse each line
            //     //  parse 1000 items per time

            //     node.warn('handle columns')
            // }

            node.send(msg);
        });

        node.on('close', async function () {

        });
    }

    RED.httpAdmin.post('/sheets-to-json-stream/sheets-options', onSheetOptionsRequest);
    RED.nodes.registerType('sheets-to-json-stream', SheetsToJSON, {
        credentials: {
            config: {}
        }
    });
};

