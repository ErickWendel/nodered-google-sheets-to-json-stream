const creds = require('./creds.json')

const google = require('@googleapis/sheets');
const { JWT } = require('google-auth-library');

async function getSheetsMetadata({ sheets, sheetsMetadata, sheetId }) {
    const response = await sheets.spreadsheets.get({
        spreadsheetId: sheetId,
    });

    const sheetData = await Promise.all(response.data.sheets.map(async sheet => {
        const sheetTitle = sheet.properties.title;

        // Fetch the first row to use as headers
        const range = `${sheetTitle}!A1:1`;
        const valuesResponse = await sheets.spreadsheets.values.get({
            spreadsheetId: sheetId,
            range: range,
        });

        const headers = valuesResponse.data.values ? valuesResponse.data.values[0] : [];

        // Calculate the cell range in A1 notation
        const rowCount = sheet.properties.gridProperties.rowCount;
        const columnCount = sheet.properties.gridProperties.columnCount;
        const columnLetter = getColumnLetter(columnCount);
        const cellsRange = `A1:${columnLetter}${rowCount}`;

        return {
            title: sheetTitle,
            rowCount: rowCount,
            columnCount: columnCount,
            frozenRowCount: sheet.properties.gridProperties.frozenRowCount,
            sheetType: sheet.properties.sheetType,
            headers: headers,
            cellsRange: cellsRange,
        };
    }));

    const metadata = {
        title: response.data.properties.title,
        sheets: sheetData,
    };

    sheetsMetadata.set(sheetId, metadata);

    return metadata;
}

function getColumnLetter(columnNumber) {
    let letter = '';
    while (columnNumber > 0) {
        const remainder = (columnNumber - 1) % 26;
        letter = String.fromCharCode(65 + remainder) + letter;
        columnNumber = Math.floor((columnNumber - 1) / 26);
    }
    return letter;
}



module.exports = function (RED) {
    function Module(ctx) {
        RED.nodes.createNode(this, ctx);
        const node = this;
        const sheetsMetadata = new Map()
        const creds = JSON.parse(RED.nodes.getNode(ctx.creds).credentials.creds);
        const sheetId = ctx.sheetId

        const auth = new JWT({
            // env var values here are copied from service account credentials generated by google
            // see "Authentication" section in docs for more info
            email: creds.client_email,
            key: creds.private_key,
            scopes: ['https://www.googleapis.com/auth/spreadsheets'],
        });

        // const spreadsheetId = '1Mte7nOo6oqvI4me-tnEenCci0l8bR04810B_q1U_1Ro'
        const sheets = google.sheets({ version: 'v4', auth });

        // Define an HTTP endpoint to handle the request from the editor
        RED.httpAdmin.post('/sheets-to-json-stream/sheets-options', async function onSheetOptionsRequest(req, res) {
            try {
                const { sheetId } = req.body
                const metadata = await getSheetsMetadata({ sheets, sheetsMetadata, sheetId });
                node.warn(metadata)

                return res.json(metadata);
            } catch (error) {
                node.error(error)
                node.error(`ensure you've been using the correct spreadsheet id, have the proper access to it and the credentials data is correct`)
                res.json()
            }
        });


        node.on('input', function (msg) {
            node.warn('wann2')

            node.send(msg);
        });

        node.on('close', async function () {

        });
    }

    RED.nodes.registerType('sheets-to-json-stream', Module);
};
